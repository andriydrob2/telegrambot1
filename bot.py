from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, ConversationHandler, MessageHandler, filters

# ID –ø—Ä–æ–¥–∞–≤—Ü—è (—Ç–≤—ñ–π Telegram ID)
SELLER_ID = 1227954847  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π —Ä–µ–∞–ª—å–Ω–∏–π ID

# –°—Ç–∞–Ω–∏ —Ä–æ–∑–º–æ–≤–∏
CHOOSING_CATEGORY, CHOOSING_PRODUCT, CONFIRMING_CART = range(3)

# –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤ —Ç–∞ —Ç–æ–≤–∞—Ä–∏ (–ø—Ä–∏–∫–ª–∞–¥)
products = {
    "–ö–∞—Ä—Ç—Ä–∏–¥–∂–∏": {
        "Vaporesso XROS 0.6 –û–º, 2 –º–ª": 150,
    },
    "–†—ñ–¥–∏–Ω–∏": {
        "Lucky 15 ml 5% WILD BERRIES": 160,
        "Lucky 15 ml 5% BERRY LEMONADE": 160,
        "Chaser 10ml 5% WATERMELON": 140,
        "Chaser 10ml 5% BLUE RASPBERRY": 140,
        "Chaser 15ml 5% CHERRIES": 170,
        "Chaser 15ml 5% BLACKBERRY": 170,
        "Chaser 30ml 5% WILD STRAWBERRY KIWI": 300,
    }
}

# –ö–æ—à–∏–∫: user_id -> {product_name: quantity}
user_carts = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("Shop üõí", callback_data="shop")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É Shop, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏.", reply_markup=reply_markup)
    return CHOOSING_CATEGORY

async def shop_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    keyboard = []
    for category in products.keys():
        keyboard.append([InlineKeyboardButton(category, callback_data=f"category_{category}")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(text="–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=reply_markup)
    return CHOOSING_PRODUCT

async def category_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    category = query.data.split("_", 1)[1]

    # –ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏ —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ –∫–Ω–æ–ø–∫–∞–º–∏ "–î–æ–¥–∞—Ç–∏"
    keyboard = []
    for product_name, price in products[category].items():
        keyboard.append([InlineKeyboardButton(f"{product_name} - {price} –≥—Ä–Ω", callback_data=f"add_{product_name}")])
    keyboard.append([InlineKeyboardButton("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫", callback_data="view_cart")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(text=f"–¢–æ–≤–∞—Ä–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó *{category}*:", reply_markup=reply_markup, parse_mode="Markdown")
    return CHOOSING_PRODUCT

async def add_to_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    product_name = query.data.split("_", 1)[1]

    # –î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫
    cart = user_carts.setdefault(user_id, {})
    cart[product_name] = cart.get(product_name, 0) + 1

    await query.answer(text=f"–î–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞: {product_name}")
    return CHOOSING_PRODUCT

async def view_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    cart = user_carts.get(user_id, {})

    if not cart:
        await query.edit_message_text(text="–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return CHOOSING_PRODUCT

    # –ü–æ–∫–∞–∑–∞—Ç–∏ –≤–º—ñ—Å—Ç –∫–æ—à–∏–∫–∞
    text = "–í–∞—à –∫–æ—à–∏–∫:\n"
    total = 0
    for product, qty in cart.items():
        # –ó–Ω–∞–π—Ç–∏ —Ü—ñ–Ω—É —Ç–æ–≤–∞—Ä—É
        price = None
        for cat_products in products.values():
            if product in cat_products:
                price = cat_products[product]
                break
        if price is None:
            price = 0
        text += f"{product} ‚Äî {qty} —à—Ç. √ó {price} –≥—Ä–Ω = {qty * price} –≥—Ä–Ω\n"
        total += qty * price
    text += f"\n–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total} –≥—Ä–Ω\n"
    text += "\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏."

    keyboard = [
        [InlineKeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="confirm_order")],
        [InlineKeyboardButton("–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏", callback_data="continue_shopping")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(text=text, reply_markup=reply_markup)
    return CONFIRMING_CART

async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    cart = user_carts.get(user_id, {})

    if not cart:
        await query.edit_message_text("–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return CHOOSING_CATEGORY

    # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ–∫—Å—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    text = f"–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ @{query.from_user.username or query.from_user.first_name} (ID: {user_id}):\n\n"
    total = 0
    for product, qty in cart.items():
        price = None
        for cat_products in products.values():
            if product in cat_products:
                price = cat_products[product]
                break
        if price is None:
            price = 0
        text += f"{product} ‚Äî {qty} —à—Ç. √ó {price} –≥—Ä–Ω = {qty * price} –≥—Ä–Ω\n"
        total += qty * price
    text += f"\n–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total} –≥—Ä–Ω"

    # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—Ä–æ–¥–∞–≤—Ü—é
    await context.bot.send_message(chat_id=SELLER_ID, text=text)

    # –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_carts[user_id] = {}

    await query.edit_message_text("–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –ü—Ä–æ–¥–∞–≤–µ—Ü—å –≤–∂–µ –æ—Ç—Ä–∏–º–∞–≤ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
    return ConversationHandler.END

async def continue_shopping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    keyboard = []
    for category in products.keys():
        keyboard.append([InlineKeyboardButton(category, callback_data=f"category_{category}")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(text="–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=reply_markup)
    return CHOOSING_PRODUCT

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token("7784019887:AAED0R6gwR3bNdQ8aYy1NFcoGi1VBaZKlEk").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING_CATEGORY: [CallbackQueryHandler(shop_button, pattern="^shop$")],
            CHOOSING_PRODUCT: [
                CallbackQueryHandler(category_chosen, pattern="^category_"),
                CallbackQueryHandler(add_to_cart, pattern="^add_"),
                CallbackQueryHandler(view_cart, pattern="^view_cart$"),
            ],
            CONFIRMING_CART: [
                CallbackQueryHandler(confirm_order, pattern="^confirm_order$"),
                CallbackQueryHandler(continue_shopping, pattern="^continue_shopping$"),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    app.run_polling()

if __name__ == "__main__":
    main()
